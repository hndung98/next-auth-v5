datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?
  password              String?
  image                 String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts  Account[]
  revenue   Revenue[]
  widgets   Widget[]
  playlists Playlist[]
  customer  Customer?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Category {
  id       String     @id @default(cuid())
  name     String
  slug     String     @unique
  parentId String?
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProductType {
  BOOK
  CLOTHES
  OTHER
}

model Product {
  id         String      @id @default(cuid())
  name       String
  price      Float
  type       ProductType
  categoryId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  book     Book?

  inventory   Inventory?
  invoiceItem InvoiceItem[]
}

model Inventory {
  id        String   @id @default(uuid())
  quantity  Int
  location  String?
  updatedAt DateTime @updatedAt

  productId String  @unique
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Author {
  id          String @id @default(cuid())
  name        String
  nationality String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  books Book[]
}

model Book {
  productId      String  @id
  title          String
  description    String?
  publishedYear  Int?
  pageCount      Int?
  coverImagePath String?
  authorId       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author  Author  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
}

model Customer {
  id          String  @id @default(cuid())
  name        String
  address     String
  phoneNumber String
  email       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  Invoice Invoice[]
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELED
}

enum PaymentMethod {
  CASH
  CREDIT
  OTHER
}

model Invoice {
  id               String        @id @default(cuid())
  amount           Int
  status           InvoiceStatus @default(PAID)
  paymentMethod    PaymentMethod @default(CASH)
  date             String
  otherDescription String? // when the payment method is OTHER
  customerId       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  items    InvoiceItem[]
}

model InvoiceItem {
  id        String @id @default(cuid())
  invoiceId String
  productId String
  quantity  Int
  price     Float
  total     Float?

  invoice Invoice @relation(fields: [invoiceId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Revenue {
  id      String @id @default(cuid())
  revenue Int
  period  String
  userId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Widget {
  id     String @id @default(cuid())
  name   String
  url    String
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatRoom {
  id       String  @id @default(cuid())
  name     String
  password String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Video {
  id         String @id @default(cuid())
  title      String
  youtubeId  String @unique
  order      Int
  playlistId String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  playlist  Playlist? @relation(fields: [playlistId], references: [id], onDelete: Cascade)
}

model Playlist {
  id     String @id @default(cuid())
  name   String
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  videos Video[]
}

model TokenBlacklist {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
}
