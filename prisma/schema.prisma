datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?
  password              String?
  image                 String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invoices Invoice[]
  accounts Account[]
  widgets  Widget[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Author {
  id          Int    @id @default(autoincrement())
  name        String
  nationality String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  books Book[]
}

model Book {
  id             Int       @id @default(autoincrement())
  title          String
  description    String?
  publishDate    DateTime?
  pageCount      Int?
  coverImagePath String?
  authorId       Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author Author @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELED
}

enum PaymentMethod {
  CASH
  CREDIT
  OTHER
}

model Invoice {
  id               String        @id @default(cuid())
  amount           Int
  status           InvoiceStatus @default(PENDING)
  paymentMethod    PaymentMethod @default(CASH)
  otherDescription String? // when the payment method is OTHER
  userId           String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Revenue {
  id      String @id @default(cuid())
  revenue Int
  period  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Widget {
  id     String @id @default(cuid())
  name   String
  Url    String
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
